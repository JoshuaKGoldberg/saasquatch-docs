# This is a swagger.io definition for the Referral SaaSquatch Rest API
swagger: "2.0"
info: 
  title: Referral SaaSquatch
  description: Build your own custom refer a friend program.
  version: 1.0.0
# the domain of the service
host: app.referralsaasquatch.com
# array of all schemes that your API supports
schemes: 
  - https
# will be prefixed to all paths
basePath: /api/v1
consumes: 
  - application/json
produces: 
  - application/json
securityDefinitions: 
  basic: 
    type: basic
    description: Authorize your requests using your apiKey as the HTTP Basic password
security:
  - basic: []
externalDocs:
  description: "Official Referral SaaSquatch documentation"
  url: "http://docs.referralsaasquatch.com/"
parameters: 
  tenant_alias: 
    name: tenant_alias
    in: path
    description: |
      Tenant being referenced. E.g. `"aboih12h16t"` or `"test_abo912126tastastt"`
    type: string
    required: true
  limit:
    name: limit
    in: query
    type: integer
    description: "A limit on the number of results returned. Defaults to `10`."
    default: 10
  offset:
    name: offset
    in: query
    type: integer
    description: "When included offsets the first result returns in the list. Use this to paginate through a long list of results. Defaults to `0`"
    default: 0

paths:
  "/{tenant_alias}/accountsync": 
    post: 
      operationId: account_sync
      summary: Create or Update an account
      description: |
        Use this method to update SaaSquatch when the status of an account changes or when a new account is created. If you're using 
        a payment system connector, such as the Recurly connector, then you won't need to use this method. We automatically track account status for Braintree, Stripe, Reculy and Zuora.
      parameters: 
        - name: account
          in: body
          description: Account details of the account to be created or updated
          schema: 
            $ref: "#/definitions/Account"
        - $ref: "#/parameters/tenant_alias"
      tags: 
        - PCT_DISCOUNT
        - FEATURE
        - CREDIT
        - TIME_CREDIT
      responses: 
        200: 
          description: Account created or updated
          examples: 
            "application/json": 
              id: a1234
              currency: USD
              subscription: 
                status: PAID
                value: 99.99
                billingIntervalType: DAY
                billingIntervalValue: 30
              referral: 
                code: 3j033r
          schema: 
            $ref: "#/definitions/Account"
        default: 
          $ref: "#/responses/GeneralError"
  "/{tenant_alias}/account/{accountId}": 
    get: 
      operationId: get_account
      summary: Lookup an account
      description: |
        Looks up an Account based upon `id` and returns the stored account information.
        This method just returns the details of the account in question, and not all associated properties like Rewards, ShareLinks, Balances or Referrals.
      parameters: 
        - name: accountId
          in: path
          description: "The `id` of the Account to look up."
          required: true
          type: string
        - $ref: "#/parameters/tenant_alias"
      responses: 
        200: 
          description: Account found
          examples: 
            "application/json":
              id: "89842"
              currency: "USD"
              subscription: null
              referral: 
                code: "WILLSANDERSON2"
          schema: 
            $ref: "#/definitions/Account"
        404: 
          description: Account NOT found
          schema: 
            $ref: "#/definitions/Error"
        default: 
          $ref: "#/responses/GeneralError"


  # "/{tenant_alias}/users": 
  #   get:
  #     operationId: list_users
  #     summary: List users
  #     description: |
  #       List all of the Users in your Referral SaaSquatch tenant. This method is the primary way of getting a full list of everyone that has been identified through the API, Squatch.js or mobile widgets.
  #       This method supports pagination using the parameters for `limit` and `offset` to iterate through a very large list of records.
  #       You can also search for particular users using the `query` method. To find information about which users have completed referrals, use the [List referrals](#list_referrals) method.
  #     parameters:
  #       - name: query
  #         in: query
  #         description: "A search query that can be used to filter users by email, name or ID."
  #         type: string
  #       - $ref: "#/parameters/limit"
  #       - $ref: "#/parameters/offset"
  #       - $ref: "#/parameters/tenant_alias"
  #     responses:
  #       200: 
  #         description: Users found
  #         examples: 
  #           "application/json":
  #             count: 1
  #             totalCount: 1
  #             users:
  #               - 
  #                 id: "14125"
  #                 accountId: "89842"
  #                 email: "mark@example.com"
  #                 firstName: "Mark"
  #                 lastName: "Testerson"
  #                 referralCode: "MARKTESTER"
  #                 imageUrl: ""
  #                 dateCreated: 1414452680584
  #                 emailHash: "a65a76ba72e5a0b1e6253efce357abb6"
  #         schema: 
  #           $ref: "#/definitions/UserList"
  #       default: 
  #         $ref: "#/responses/GeneralError"

  "/{tenant_alias}/user": 
    post: 
      operationId: create_user
      summary: Create or Update a User
      description: |
        This method creates or updates a User object by performing an atomic upsert operation. Using this method will either replace the information stored about a given user, or 
        create a new user if no User with a matching `id` is found. This method is helpful for synchronizing user information from your database into Referral SaaSquatch.
        This method will not create or update the Account linked by `accountId`. When creating users for the first time ensure that the Account already exists or create it before using this call.
        See the article on [Shared vs Solo Accounts](/shared-vs-solo-accounts/) for more information on Users and Accounts and how they relate.
      parameters: 
        - name: user
          in: body
          description: Details of the User to be created or updated
          required: true
          schema: 
            $ref: "#/definitions/User"
        - $ref: "#/parameters/tenant_alias"
      responses: 
        200: 
          description: User Created or Updated
          examples: 
            "application/json": 
              id: "876343"
              accountId: "613611"
              email: "bob@example.com"
              firstName: "Bob"
              lastName: "Testerson"
              referralCode: "BOBTESTERSON"
              imageUrl: ""
          schema: 
            $ref: "#/definitions/User"
        default: 
          $ref: "#/responses/GeneralError"
    get:
      operationId: get_user_by_referralcode
      summary: Lookup a user by Referral Code
      description: |
        Looks up a user based upon their `ReferralCode` and returns their personal information.
        This method is useful for retrieving the user when only the Referral Code is available. For example when a referred user enters a Referral Code during checkout and you want to find out who this Referral Code belongs to.
      parameters:
        - name: referralCode
          in: query
          description: "The `referralCode` of the user you want to retrieve. For example BOBTESTERSON."
          required: true
          type: string
          x-example: "BOBTESTERSON"
        - $ref: "#/parameters/tenant_alias"
      responses: 
        200: 
          description: User found
          examples: 
            "application/json":
              id: "876343"
              accountId: "613611"
              email: "bob@example.com"
              firstName: "Bob"
              lastName: "Testerson"
              referralCode: "BOBTESTERSON"
              imageUrl: ""
          schema: 
            $ref: "#/definitions/User"
        404: 
          description: User NOT found
          schema: 
            $ref: "#/definitions/Error"
        default: 
          $ref: "#/responses/GeneralError"

  "/{tenant_alias}/account/{accountId}/user/{userId}": 
    get: 
      operationId: get_user
      summary: Lookup a user
      description: |
        Looks up a user based upon their `id` and returns their personal information.
        This method just returns the details of the user in question, and not all associated properties like Rewards, ShareLinks, Balances or Referrals.
      parameters: 
        - name: accountId
          in: path
          description: "The `id` of the Account that this user is a member of. See [Shared vs. Solo accounts](/shared-vs-solo-accounts/) for more info."
          required: true
          type: string
        - name: userId
          in: path
          description: "The `id` of the User to find"
          required: true
          type: string
        - $ref: "#/parameters/tenant_alias"
      responses: 
        200: 
          description: User found
          examples: 
            "application/json":
              id: "876343"
              accountId: "613611"
              email: "bob@example.com"
              firstName: "Bob"
              lastName: "Testerson"
              referralCode: "BOBTESTERSON"
              imageUrl: ""
          schema: 
            $ref: "#/definitions/User"
        404: 
          description: User NOT found
          schema: 
            $ref: "#/definitions/Error"
        default: 
          $ref: "#/responses/GeneralError"
          

  "/{tenant_alias}/account/{accountId}/user/{userId}/sharelinks":
    get: 
      operationId: get_sharelinks
      summary: Lookup a user's share links
      description: |
        Gets the share links for a user. Share links are the links that people use to refer their friends and are the same links used in the Referral SaaSquatch widgets. The main 
        use case for this method is to look up share links to include in other channels like email marketing, CRM and product integration when a widget or mobile webview can't be
        easily used. For example, one could write "Share this link with your friends, and get rewarded when they sign up" and include the share link looked up using this method.
        
        All share links work by dropping a tracking cookie when someone clicks the link and redirecting the new user to a landing page. This cookie includes the value of the 
        referral code of the person that shared it. The cookie
        can be read using the `autofill` function of Squatch.js and is also passed along as the `rsCode` parameter in the redirect.
        For example `http://ssqt.co/pZVp` redirects to `https://www.google.ca/?rsCode=THIRDUSER`.
        
        There are many share links for each user, each one tagged with additional metadata for tracking the effectiveness of sharing channels. For example the `facebookShareLink` is used in the 
        share on Facebook functionality of the widget. When people share on facebook using the widget that `facebookShareLink` will be posted on their wall so that when new people click on that
        link they will be tracked as a referral and attributed back to Facebook. Note that this does not necessarily guarantee tracking; the generic `shareLink` could simply be copied 
        and pasted on to Facebook, and due to limitation on http referer information passed on by browsers, it may not be possible to determine which share medium a new sign up came from.
        
        In some cases it is preferable to have users share their referral code with friends instead of sharing their referral link. For example mobile apps and cookie blocking may prevent
        a share link from successfully tracking a referral, and having an input box for "Referral Code" on your product sign up form gets around these limitations and will ensure that more
        types of referrals can be tracked. Use the [Lookup a user API call](#get_user) to find a user's referral code.
      parameters: 
        - $ref: "#/parameters/tenant_alias"
        - name: accountId
          in: path
          description: The ID of the account to look up
          required: true
          type: string
        - name: userId
          in: path
          description: Filters share links by `user.id`.
          required: true
          type: string
      tags: 
        - SHARELINKS
      responses: 
        200: 
          description: A list of share links
          schema: 
            $ref: "#/definitions/Sharelink"
          examples: 
            "application/json": 
              $ref: "#/definitions/Sharelink/example"
        404: 
          description: User/Account not found
          schema: 
            $ref: "#/definitions/Error"  
        default:
          $ref: "#/responses/GeneralError"
            
  "/{tenant_alias}/code/{code}": 
    get: 
      operationId: get_code
      summary: Lookup a referral code
      description: |
        Looks up a referral code and the attached details
      parameters: 
        - 
          name: code
          in: path
          description: The referral code to look up. E.g. "BOBTESTERSON"
          required: true
          type: string
        - $ref: "#/parameters/tenant_alias"
      tags: 
        - PCT_DISCOUNT
        - FEATURE
        - CREDIT
        - TIME_CREDIT
      responses: 
        200: 
          description: Referral code found
          examples: 
            "application/json":
              code: "BOBTESTERSON"
              dateCreated: 1411600868797
              referrerName: "Bob Testerson"
              reward:
                type: "PCT_DISCOUNT"
                discountPercent: 10
                monthsDiscountIsValid: 12
          schema: 
            $ref: "#/definitions/Code"
        404: 
          description: Referral code NOT found
          schema: 
            $ref: "#/definitions/Error"
        default: 
          $ref: "#/responses/GeneralError"

  "/{tenant_alias}/referrals":
    get:
      operationId: list_referrals
      summary: List referrals
      description: |
        List all of the referrals in your Referral SaaSquatch tenant. This method is the primary way of getting a full list of everyone that has made a referral and everyone that has been referred,
        and supports pagination using the parameters for `limit` and `offset` to iterate through a very large list of records.
        You can also use the query parameters for `referringAccountId` and `referringUserId` to filters this list of referrals to only include those made by a given user.
      parameters: 
        - name: referringAccountId
          in: query
          type: string
          description: "When included, filters the results to only referrals that were referred users with this `AccountId`"
        - name: referringUserId
          in: query
          type: string
          description: "When included, filters the results to only referrals that were referred users with this `UserId`"
        - name: dateReferralPaid
          in: query
          type: string
          description: "When included, filters the results either to the exact timestamp if only one value is given, or a range if devided by a comma. I.E. 0,123412451 gives all referrals that converted between 0 and 123412451."
        - name: dateReferralEnded
          in: query
          type: string
          description: "When included, filters the results either to the exact timestamp if only one value is given, or a range if devided by a comma. I.E. 0,123412451 gives all referrals that ended between 0 and 123412451."
        - name: referredModerationStatus
          in: query
          type: string
          description: "When included, filters the result to only include referred users with that status. Statuses that are accepted: `PENDING`, `APPROVED` or `DENIED`."
        - name: referrerModerationStatus
          in: query
          type: string
          description: "When included, filters the result to only include referrers with that status. Statuses that are accepted: `PENDING`, `APPROVED` or `DENIED`."
        - $ref: "#/parameters/limit"
        - $ref: "#/parameters/offset"
        - $ref: "#/parameters/tenant_alias"
      responses:
        200: 
          description: A list of referrals
          schema:
            $ref: "#/definitions/ReferralList"
          examples: 
            "application/json": 
              count: 2
              totalCount: 4
              referrals: 
                - 
                  id: "5462600de4b09b1c41108f28"
                  referredUser: 
                    id: "876343"
                    accountId: "613611"
                    email: "logan@example.com"
                    firstName: "Logan"
                    lastName: "Volker"
                    referralCode: "LOGANVOLKER"
                    imageUrl: ""
                  referrerUser: 
                    id: "14125"
                    accountId: "89842"
                    email: "mark@example.com"
                    firstName: "Mark"
                    lastName: "Smellerson"
                    referralCode: "MARKSMELLERSON"
                    imageUrl: ""
                  referredReward: 
                    type: "PCT_DISCOUNT"
                    id: "5462600de4b09b1c41108f2e"
                    dateGiven: 1415733261275
                    dateExpires: null
                    dateCancelled: null
                    accountId: "613611"
                    userId: "876343"
                    cancellable: true
                    rewardSource: "REFERRED"
                    discountPercent: 20
                    unit: "%"
                  referrerReward: null
                  moderationStatus: "ACTIONED"
                  dateReferralStarted: 1415733261238
                  dateReferralPaid: null
                  dateReferralEnded: null
                  dateModerated: 1427410131006
                  referredModerationStatus: "APPROVED"
                  referrerModerationStatus: "APPROVED"
                - 
                  id: "546270a6e4b0c1871186a920"
                  referredUser: 
                    id: "898746321"
                    accountId: "987321"
                    email: "hello@example.com"
                    firstName: "Henk"
                    lastName: "Thompson"
                    referralCode: "HENKTHOMPSON"
                    imageUrl: ""
                  referrerUser: 
                    id: "14125"
                    accountId: "89842"
                    email: "mark@example.com"
                    firstName: "Mark"
                    lastName: "Smellerson"
                    referralCode: "MARKSMELLERSON"
                    imageUrl: ""
                  referredReward: 
                    type: "PCT_DISCOUNT"
                    id: "546270a6e4b0c1871186a926"
                    dateGiven: 1415737510458
                    dateExpires: null
                    dateCancelled: null
                    accountId: "987321"
                    userId: "898746321"
                    cancellable: true
                    rewardSource: "REFERRED"
                    discountPercent: 20
                    unit: "%"
                  referrerReward: 
                    type: "PCT_DISCOUNT"
                    id: "546270d5e4b0c1871186a93a"
                    dateGiven: 1415737557271
                    dateExpires: null
                    dateCancelled: null
                    accountId: "89842"
                    userId: "14125"
                    cancellable: true
                    rewardSource: "FRIEND_SIGNUP"
                    discountPercent: 20
                    unit: "%"
                  moderationStatus: "ACTIONED"
                  dateReferralStarted: 1415737510411
                  dateReferralPaid: 1415737557217
                  dateReferralEnded: null
                  dateModerated: 1427410131029
                  referredModerationStatus: "APPROVED"
                  referrerModerationStatus: "APPROVED"

        default: 
          $ref: "#/responses/GeneralError"
  "/{tenant_alias}/referrals/{referralId}":
    get:
      operationId: get_referral
      summary: Lookup a Referral
      description: |
        Looks up a single Referral object by it's associated `id`. This method is helpful for looking into a particular referral of interest. Since it requires the `id` of the referral to
        be specified, it isn't applicable for querying all referrals to find those made by a particular user or account. To query for those referrals use the [list referrals](#list_referrals) endpoint instead
        with query parameters specified.
      parameters: 
        - name: referralId
          in: path
          type: string
          description: "The `id` of the referral to look up"
          required: true
        - $ref: "#/parameters/tenant_alias"
      responses:
        200: 
          description: Referral found
          schema:
            $ref: "#/definitions/Referral"
          examples: 
            "application/json":
              id: "546270a6e4b0c1871186a920"
              referredUser: 
                id: "898746321"
                accountId: "987321"
                email: "hello@example.com"
                firstName: "Henk"
                lastName: "Thompson"
                referralCode: "HENKTHOMPSON"
                imageUrl: ""
              referrerUser: 
                id: "14125"
                accountId: "89842"
                email: "mark@example.com"
                firstName: "Mark"
                lastName: "Smellerson"
                referralCode: "MARKSMELLERSON"
                imageUrl: ""
              referredReward: 
                type: "PCT_DISCOUNT"
                id: "546270a6e4b0c1871186a926"
                dateGiven: 1415737510458
                dateExpires: null
                dateCancelled: null
                accountId: "987321"
                userId: "898746321"
                cancellable: true
                rewardSource: "REFERRED"
                discountPercent: 20
                unit: "%"
              referrerReward: 
                type: "PCT_DISCOUNT"
                id: "546270d5e4b0c1871186a93a"
                dateGiven: 1415737557271
                dateExpires: null
                dateCancelled: null
                accountId: "89842"
                userId: "14125"
                cancellable: true
                rewardSource: "FRIEND_SIGNUP"
                discountPercent: 20
                unit: "%"
              moderationStatus: "ACTIONED"
              dateReferralStarted: 1415737510411
              dateReferralPaid: 1415737557217
              dateReferralEnded: null
              dateModerated: 1427410131029
              referredModerationStatus: "APPROVED"
              referrerModerationStatus: "APPROVED"
        404: 
          description: Referral NOT found
          schema: 
            $ref: "#/definitions/Error"
        default: 
          $ref: "#/responses/GeneralError"
  "/{tenant_alias}/referrals/moderate":
    post:
      operationId: moderate_referrals
      summary: Moderate referrals
      description: |
        Moderates one or several referrals by either approving or denying.
        Moderation can apply to one side of a referral, the other side, or both sides (Referrer and Referred).
        When a referral is denied, the associated reward will be "cancelled". 
        A referral can be moderated several times, subsequently cancelling and un-cancelling the associated reward or rewards, and can be done as long as the associated reward is `cancellable`. 
        Some rewards such as the coupons automatically generated by Referral SaaSquatch into Stripe and Recurly are not `cancellable` and requests to change the moderation will error.
      parameters:
        - name: moderationBulkRequest
          in: body
          description: Details of the referrals to be moderated
          schema: 
            $ref: "#/definitions/ReferralModerationBulkRequest"
        - $ref: "#/parameters/tenant_alias"
      responses:
        200: 
          description: Success
        default: 
          description: Unexpected error
          schema: 
            $ref: "#/definitions/Error"


  "/{tenant_alias}/reward/balance": 
    get: 
      operationId: list_balances
      summary: List reward balances
      description: |
        Looks up the balance for all rewards of the same type and units.
      parameters: 
        - name: accountId
          in: query
          description: The ID of the account to look up
          required: true
          type: string
        - name: userId
          in: query
          description: Filters rewards by `user.id`.
          type: string
        - name: rewardTypeFilter
          in: query
          description: Filters rewards by `type`.
          type: string
        - name: featureTypeFilter
          in: query
          description: Filters rewards by feature type. Works with `FEATURE` types.
          type: string
        - $ref: "#/parameters/tenant_alias"
      tags: 
        - PCT_DISCOUNT
        - FEATURE
        - CREDIT
        - TIME_CREDIT
      responses: 
        200: 
          description: A list of reward balances
          schema: 
            type: array
            items: 
              $ref: "#/definitions/RewardBalance"
          examples: 
            "application/json": 
              - 
                type: FEATURE
                featureType: storage
                count: 8
                totalQuantity: 500
                unit: MB
              - 
                type: CREDIT
                count: 4
                totalAssignedCredit: 10000
                totalRedeemedCredit: 0
                unit: cents
              - 
                type: PCT_DISCOUNT
                totalDiscountPercent: 30
                referredDiscountPercent: 10
                referrerDiscountPercent: 20
        default: 
          $ref: "#/responses/GeneralError"
  "/{tenant_alias}/credit/bulkredeem": 
    post: 
      operationId: debit_balance
      summary: Debit a reward balance
      description: "Used to redeem the credit earned from a referral program. Permanently debits an account balance. Works with: `TIME_CREDIT` and `CREDIT`"
      parameters: 
        - name: debit
          in: body
          description: Details of the debit
          required: true
          schema: 
            $ref: "#/definitions/RewardBalanceDebitRequest"
        - $ref: "#/parameters/tenant_alias"
      responses: 
        200: 
          description: Balance debitted
          examples: 
            "application/json":
              creditRedeemed: 200
              creditAvailable: 0
              unit: "cents"
          schema: 
            $ref: "#/definitions/RewardDebitResponse"
        default: 
          $ref: "#/responses/GeneralError"

  "/{tenant_alias}/reward":
    get: 
      operationId: list_rewards
      summary: List single rewards
      description: |
        Looks up a list of single rewards
      parameters: 
        - name: accountId
          in: query
          description: The ID of the account to look up
          required: true
          type: string
        - name: userId
          in: query
          description: Filters rewards by `user.id`.
          type: string
        - name: rewardTypeFilter
          in: query
          description: Filters rewards by `type`.
          type: string
        - name: featureTypeFilter
          in: query
          description: Filters rewards by feature type. Works with `FEATURE` types.
          type: string
        - $ref: "#/parameters/tenant_alias"
      tags: 
        - PCT_DISCOUNT
        - FEATURE
        - CREDIT
        - TIME_CREDIT
      responses: 
        200: 
          description: A list of rewards
          schema: 
            type: array
            items: 
              $ref: "#/definitions/Reward"
          examples: 
            "application/json": 
              - "type": "FEATURE"
                "id": "5423508fe4b05184a716a08b"
                "dateGiven": 1411600527094
                "dateExpires": null
                "dateCancelled": null
                "accountId": "F3BNA0HOKJR17656"
                "userId": "5423508ee4b059bbbadf48e1"
                "cancellable": false
                "rewardSource": "REFERRED"
                "featureType": "storage"
                "name": "100 MB Storage"
                "description": "100 MB Free Storage"
                "quantity": 100
                "unit": "MB"
                
              - "type": "PCT_DISCOUNT"
                "id": "54235160e4b05184a716a0b2"
                "dateGiven": 1411600736220
                "dateExpires": 1443136736220
                "dateCancelled": null
                "accountId": "GUYRP0T2F6F3Y6PN"
                "userId": "54235132e4b059bbbadf4903"
                "cancellable": true
                "rewardSource": "FRIEND_SIGNUP"
                "discountPercent": 10

              - "type": "CREDIT"
                "id": "542351e4e4b05184a716a0c5"
                "dateGiven": 1411600868797
                "dateExpires": null
                "dateCancelled": null
                "accountId": "85W7A2F1QZS9NGI8"
                "userId": "542351e4e4b059bbbadf496d"
                "cancellable": false
                "rewardSource": "FRIEND_SIGNUP"
                "unit": "cents"
                "assignedCredit": 10000
                "redeemedCredit": 0
                "redeemable": true
        default: 
          $ref: "#/responses/GeneralError"
  "/{tenant_alias}/credit/{id}/redeem":
    post: 
      operationId: debit_reward
      summary: Redeem a single reward
      description: "Used to redeem an individual credit earned from a referral program. Works with: `TIME_CREDIT` and `CREDIT`"
      parameters: 
        - name: id
          in: path
          description: The ID of the specific reward to be redeemed
          required: true
          type: string
        - name: debit
          in: body
          description: Details of the debit
          schema: 
            $ref: "#/definitions/RewardDebitRequest"
        - $ref: "#/parameters/tenant_alias"
      responses: 
        200: 
          description: Reward debitted
          examples: 
            "application/json":
              creditRedeemed: 200
              creditAvailable: 1800
              unit: "cents"
          schema: 
            $ref: "#/definitions/RewardDebitResponse"
        default: 
          $ref: "#/responses/GeneralError"

  "/{tenant_alias}/theme/variables/schema":
    get: 
      operationId: lookup_variables_schema
      summary: Lookup variables schema
      description: |
        Returns the variables schema object that is defined in the tenant theme repository. 
        This will be a [JSON Schema](http://json-schema.org/) standards compliant definition. 
        See [theme variables](/themes/variables/) for more info.
      produces:
        - "application/schema+json"
      parameters:
        - $ref: "#/parameters/tenant_alias"
      responses:
        200:
          description: Variables Schema Found
          schema:
            $ref: "#/definitions/VariablesSchema"
          examples:
            "application/schema+json": 
              $ref: "#/definitions/VariablesSchema/example"
        default: 
          $ref: "#/responses/GeneralError"

  "/{tenant_alias}/theme/variables/instance":
    get: 
      operationId: lookup_variables
      summary: Lookup variables values
      description: |
        Returns the current variables values stored for the schema object that is defined in the tenant theme repository. 
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/tenant_alias"
      responses:
        200:
          description: Variables Found
          schema:
            $ref: "#/definitions/VariablesInstance"
          examples:
            "application/schema+json": 
              $ref: "#/definitions/VariablesInstance/example"
        default: 
          $ref: "#/responses/GeneralError"
    
    put:
      operationId: replace_variables
      summary: Replace Variable Values
      description: |
        Replaces all of the previously set values. Use this operation only when your
        goal is to completely replace all variable values, including deleting previous
        values of othe fields that you're not setting. Prefer to use a `PATCH` request
        when you only want to update one variable or a subset of variables.
        See [theme variables](/themes/variables/) for more info.
      parameters:
        - name: instance
          in: body
          description: The variables object to replace all previously stored values.
          schema: 
            $ref: "#/definitions/VariablesInstance"
        - $ref: "#/parameters/tenant_alias"
      responses: 
        204: 
          description: Variables Replaced
        400: 
          $ref: "#/responses/VariablesErrorResponse"
        default: 
          $ref: "#/responses/GeneralError"
      
    patch:
      operationId: update_variables
      summary: Update Variable Values
      description: |
        Updates the previously stored values for the variables included in this request.
        Will not override, nullify or delete the other variable values that are not included.
        This method can be used to selectively set a single variable. See [theme variables](/themes/variables/) for more info.
      parameters:
        - name: instance
          in: body
          description: The variables object that will update fields included here.
          schema: 
            $ref: "#/definitions/VariablesInstance"
        - $ref: "#/parameters/tenant_alias"
      responses:
        200: 
          description: Variables Updated
          schema: 
            $ref: "#/definitions/VariablesInstance"
          examples:
            "application/json": 
              $ref: "#/definitions/VariablesInstance/example"
        400: 
          $ref: "#/responses/VariablesErrorResponse"
        default: 
          $ref: "#/responses/GeneralError"


  "/{tenant_alias}/subscription": 
    post: 
      operationId: create_webhook
      summary: Create a webhook subscription
      description: |
        Subscribes a URL to receive events via webhooks
      parameters: 
        - name: endpoint
          in: body
          description: Details of the endpoint to be created
          schema: 
            $ref: "#/definitions/WebhookEndpoint"
        - $ref: "#/parameters/tenant_alias"
      responses: 
        201: 
          description: Webhook endpoint created
        default: 
          $ref: "#/responses/GeneralError"
    get: 
      operationId: list_webhooks
      summary: List webhook subscriptions
      description: |
        Lists all the URLs that are currently subscribed to receive events via webhooks
      parameters: 
        - $ref: "#/parameters/tenant_alias"
      responses: 
        200: 
          description: A list of endpoints
          schema: 
            type: array
            items:
              $ref: "#/definitions/WebhookEndpoint"
          examples: 
            "application/json": 
              - endpointUrl: "https://example.com/hook"
                name: "Zapier"
              - endpointUrl: "https://another.example.com/hook"
                name: "Example"
        default: 
          $ref: "#/responses/GeneralError"
  "/{tenant_alias}/subscription/{url}":
    delete: 
      operationId: delete_webhook
      summary: Delete a webhook subscription
      description: |
        Removes a URL from receiving events via webhooks
      parameters: 
        - name: url
          in: path
          description: |
            The url of the endpoint that will be removed. *Remember to URL-encode this field*
          required: true
          type: string
        - $ref: "#/parameters/tenant_alias"
      responses: 
        204: 
          description: Endpoint deleted
        default: 
          $ref: "#/responses/GeneralError"
  "/{tenant_alias}/subscription/{url}/test": 
    post: 
      operationId: test_webhook
      summary: Test a webhook subscription
      description: |
        Sends a test event to the specified webhook
      parameters: 
        - name: url
          in: path
          description: |
            The url of the endpoint to send a test message to. *Remember to URL-encode this field*
          required: true
          type: string
        - $ref: "#/parameters/tenant_alias"
      responses: 
        204: 
          description: Test message sent
        default: 
          $ref: "#/responses/GeneralError"


  "/{tenant_alias}/discount/{code}":
    get:
      operationId: get_coupon
      summary: Lookup a discount code
      description: |
        This method lets you look up the details of a referral code and to ensure that it is valid. Works with `PCT_DISCOUNT`
      parameters: 
        - name: code
          in: path
          description: The coupon/referral code to look up. Eg. BOBTESTERSON
          required: true
          type: string
        - $ref: "#/parameters/tenant_alias"
      tags: 
        - PCT_DISCOUNT
      responses:
        200:
          description: Information about the coupon/referral code
          examples: 
            "application/json":
              "couponCode" : "BOBTESTERSON"
              "discountPercentage" : 20
              "dateCreated" : 1377727546528
              "discountId" : "saasquatch_discount" 
          schema:
            $ref: "#/definitions/DiscountCode"
        404:
          description: Coupon/referral code not found
          schema: 
            $ref: "#/definitions/Error"
        default: 
          $ref: "#/responses/GeneralError"
  "/{tenant_alias}/discount":
    post: 
      operationId: set_coupon
      summary: Set discount code on an account
      description: |
        This method associates a new account with their referrer. Use this method when 
        someone signs up for a paid account to set the coupon code used for them. For Stripe and Recurly do not use this call.
        Instead during sign-up, just pass the coupon/referral code in your subcribe call. Works with `PCT_DISCOUNT`
      parameters:
        - name: accountDiscount
          in: body
          description: Account discount details to be updated
          schema: 
            $ref: "#/definitions/AccountDiscountRequest"
        - $ref: "#/parameters/tenant_alias"
      tags: 
        - PCT_DISCOUNT
      responses: 
        200:
          description: Account updated
        400:
          description: Not implemented
        default: 
          $ref: "#/responses/GeneralError"
  "/{tenant_alias}/account/{accountId}/discount":
    get:
      operationId: get_account_reward
      summary: Lookup an account discount
      description: |
        This method information about an account's discount, if any, and what that discount would look like with a `couponCode` applied. Works with `PCT_DISCOUNT`
      parameters: 
        - name: accountId
          in: path
          description: The account to look up
          required: true
          type: string
        - name: couponCode
          in: query
          description: When included, will return a total reward available including any coupon code.
          type: string
        - $ref: "#/parameters/tenant_alias"
      tags: 
        - PCT_DISCOUNT
      responses:
        200: 
          description: Information about the account discount
          examples: 
            "application/json":
              "accountId": "SV0TYE5OWI11120144"
              "discountPercentage": 10
              "referrerDiscountPercent": 0
              "referredDiscountPercent": 10
              "discountId": "saasquatch_discount"
          schema:
            $ref: "#/definitions/AccountDiscount"
        404: 
          description: Account not found
          schema: 
            $ref: "#/definitions/Error"
        default: 
          $ref: "#/responses/GeneralError"


definitions:
  ## General object details
  Account: 
    required: 
      - id
      - subscription
    properties: 
      id: 
        type: string
        description: Unique identifier for the account
        example: abc123
      subscription: 
        $ref: "#/definitions/AccountSubscription"
      referral: 
        $ref: "#/definitions/AccountReferral"
      currency: 
        type: string
        example: USD
        description: |
          Default is `"USD"`. Otherwise use an ISO 4217 Standard currency code in uppercase.
  AccountDiscount:
    description: Information about the account's discount, if any
    properties:
      accountId:
        type: string
        example: SV0TYE5OWI11120144
        description: The account id
      discountPercentage:
        type: integer
        example: 10
        description: |
            An integer representing the total discount percentage from the referral program. 
            e.g. For 10% would return the number 10. `discountPercentage` = `referredDiscountPercent` + `referrerDiscountPercent`
      referredDiscountPercent:
        type: integer
        description: |
          An integer representing the discount percentage from being referred. 
          This will only have a value if the account has a coupon/referral code already associated with it, or if `couponCode` was passed as an argument.
      referrerDiscountPercent:
        type: integer
        description: An integer representing the discount earned from referring other accounts.
      ratePlanId:
        type: string
        description: |
          **Zuora only** The Zuora rate plan ID used to apply the discount.
      discountId:
        type: string
        description: |
          **Braintree only** The Braintree discount ID used to apply the discount.
      referrerName:
        type: string
        description: |
          The first and last name of the referrer that referred the user or `null` if this account was not referred.

  AccountSubscription: 
    description: An object describing the current subscription for this account
    required: 
      - status
    properties: 
      status: 
        type: string
        description: The status of the subscription. One of `PAID`, `TRIAL`, `FREE` or `CANCELLED`
        example: PAID
        enum:
          - PAID
          - TRIAL
          - FREE
          - CANCELLED
      billingIntervalType: 
        type: string
        description: "Type of billing interval. One of `DAY`, `WEEK`, `MONTH`, `QUARTER`, `SEMI_ANNUAL` or `YEAR`. Required when `status: 'PAID'`."
        example: DAY
        enum:
          - DAY
          - WEEK
          - MONTH
          - QUARTER
          - SEMI_ANNUAL
          - YEAR
      billingIntervalValue: 
        type: integer
        description: "The value of billing interval. Required when `status: PAID`. Example billing intervals"
      value: 
        type: number
        format: double
        example: 99.99
        description: "Dollar value of the subscription per renewal. Required when `status: PAID`"
  AccountReferral: 
    description: Info about who referred this account. Use this on first signup.
    properties: 
      code: 
        type: string
        example: BOBTESTERSON
        description: |
          The referral code of the person that referred this account. Use squatch.js autofill to retrieve this value from the tracking cookie on your checkout form.
  Code: 
    description: A referral code, details of the person who it belongs to, and details of the reward it unlocks
    properties: 
      code: 
        type: string
        example: BOBTESTERSON
        description: |
          The unique identifier for the code. E.g. "BOBTESTERSON"
      dateCreated: 
        type: integer
        example: 1411600868797
        description: The date the code was created.
      referrerName: 
        type: string
        example: Bob Testerson
        description: |
          The name of the owner of this code. E.g. "Bob Testerson"
      reward: 
        $ref: "#/definitions/RewardTemplate"
  DiscountCode:
    description: Information about the coupon/referral code
    properties:
      couponCode:
        type: string
        description: The coupon/referral code
        example: "BOBTESTERSON"
      referrerName:
        type: string
        description: The full name of the referrer who owns this code.
        example: "Bob Testerson"
      discountPercentage:
        type: integer
        example: 10
        description: |
          An integer representing the discount percentage. e.g. For 10% would return the number 10.
      dateCreated:
        type: integer
        example: 1377727546528
        description: "Timestamp - The coupon/referral code to look up"
      ratePlanId:
        type: string
        description: Zuora only The Zuora rate plan ID used to apply this coupon.
      discountId:
        type: string
        example: saasquatch_discount
        description: Braintree only The Braintree discount ID used to apply this coupon.
  RewardTemplate: 
    description: "Details of the reward that could be earned -- but *is not yet earned*."
    properties: 
      type: 
        type: string
        example: CREDIT
        description: "The type of reward. One of either the following: `PCT_DISCOUNT`, `FEATURE`, `TIME_CREDIT`, `CREDIT`"
        enum:
          - PCT_DISCOUNT
          - FEATURE
          - TIME_CREDIT
          - CREDIT
      unit: 
        type: string
        example: cents
        description: |
          An identifier for the unit of the reward. E.g. "credit-in-cents", "freemb", "giftcard20", "tshirt", "freemonth". Only works with types `FEATURE`, `TIME_CREDIT`, `CREDIT`
      credit: 
        type: integer
        example: 2000
        description: |
          The amount of credit that this referral code is valid for. e.g. for $20 this
          object would have credit=2000, unit="cents". Only works for `TIME_CREDIT`, `CREDIT`
      discountPercent: 
        type: integer
        description: |
          The percent discount that the referral code is valid for. E.g. "10" for "10%". Only works with `PCT_DISCOUNT`
      monthsDiscountIsValid: 
        type: integer
        description: When this reward is set to expire.
      featureType: 
        type: string
        description: A unique identifier for the type of feature. Only works with types `FEATURE`
      name: 
        type: string
        description: The human readable name of the feature. Only works with types `FEATURE`
      description: 
        type: string
        description: The human readable description of the feature. Only works with types `FEATURE`
      quantity: 
        type: integer
        description: The quantity of feature that this referral code is valid for.  Only works with types `FEATURE`
  Reward:
    description: Details of an individual reward.
    properties: 
      id:
        type: string
        description: The unique identifier for this reward
      type:
        type: string
        description: "The type of reward. One of either the following: `PCT_DISCOUNT` `FEATURE` `TIME_CREDIT` or `CREDIT`"
        enum:
          - PCT_DISCOUNT
          - FEATURE
          - TIME_CREDIT
          - CREDIT
      dateGiven:
        type: integer
        description: "Timestamp of when this reward was earned."
      dateExpires:
        type: integer
        description: "Timestamp of when this reward is set to expire."
      dateCancelled:
        type: integer
        description: "Timestamp if the reward is cancellable and has been cancelled, the date it was cancelled on. Null if not never cancelled."
      cancellable:
        type: boolean
        description: "If a reward is cancellable then it may be revoked. If it has been cancelled then dateCancelled will be non-null."
      rewardSource:
        type: string
        description: "The type of the source of the reward. One of either `FRIEND_SIGNUP` or `REFERRED`."
        enum:
          - FRIEND_SIGNUP
          - REFERRED
      unit:
        type: string
        description: "An identifier for the unit of the reward. E.g. `'credit-in-cents'`, `'freemb'`, `'giftcard20'`, `'tshirt'`, `'freemonth'` or `'%'`"
      discountPercent:
        type: integer
        description: "The percent discount. E.g. 10 means 10% Works with: `PCT_DISCOUNT`"
      featureType:
        type: string 
        description: "A unique identifier for the type of feature. E.g. `'freeSeats'` or `'freeMb'`. Works with: `FEATURE`"
      name:
        type: string
        description: "The name of the feature. e.g. `'Free Seats'` or `'Free Storage'` Works with: `FEATURE`"
      description:
        type: string
        description: "The feature description. e.g. 'Bonus user seats for your account' or 'Extra megabytes of free storage' Works with: `FEATURE`"
      quantity:
        type: integer
        description: "The earned quantity of the feature Works with:`FEATURE`"
      assignedCredit:
        type: integer
        description: "The earned quantity of the feature. Works with: `TIME_CREDIT` or `CREDIT`"
      redeemedCredit:
        type: integer
        description: "The redeemed quantity of the feature. Works with: `TIME_CREDIT` or `CREDIT`"
  User: 
    description: An object describing an individual user
    required:
      - id
      - accountId
      - firstName
    properties: 
      id:
        type: string
        example: "219065"
        description: The unique identifier provided for this user.
      accountId:
        type: string
        example: "accc9065"
        description: The unique identifier of the Account that this user belongs to.
      referralCode:
        type: string
        example: "BOBTESTERSON"
        description: The referral code *used for sharing by this user*
      email:
        type: string
        example: "bob@example.com"
        description: The email address provided for the user. SaaSquatch uses this to notify someone when they have a successful referral.
      imageUrl:
        type: string
        example: "https://www.example.com/profiled/ab5111251125"
        description: |
          Optionally used in widgets, emails, and themes. If you provide a absolute profile image URL the minimum image size is 80px x 80px.
      firstName:
        type: string
        example: "Bob"
        description: |
          The user's first name
      lastName:
        type: string
        example: "Testerson"
        description: |
          The user's last name
  RewardBalance: 
    description: Details of the balance of several individual rewards.
    properties: 
      type: 
        type: string
        example: CREDIT
        description: "The type of reward. One of either the following: `PCT_DISCOUNT`, `FEATURE`, `TIME_CREDIT`, `CREDIT`"
        enum:
          - PCT_DISCOUNT
          - FEATURE
          - TIME_CREDIT
          - CREDIT
      unit: 
        type: string
        example: cents
        description: |
          An identifier for the unit of the reward. E.g. "credit-in-cents", "freemb", "giftcard20", "tshirt", "freemonth". Only works with types `FEATURE`, `TIME_CREDIT`, `CREDIT`
      count: 
        type: integer
        description: |
          "The number of rewards earned. Usually is equal to the number of successful referrals made. 
          E.g. An account has $80 of credit due to the referral program. $60 from making referrals, $20 from being referred. 
          The count would be 4 rewards, each worth $20. Only works for `FEATURE`, `TIME_CREDIT`, `CREDIT`"
      featureType: 
        type: string
        description: A unique identifier for the type of feature. Only works with types `FEATURE`
      totalAssignedCredit: 
        type: integer
        example: 4000
        description: "The total assignedCredit for all reward credits of the same unit type. Only works with types: `TIME_CREDIT`, `CREDIT`"
      totalRedeemedCredit: 
        type: integer
        example: 1490
        description: "The total redeemedCredit for all reward credits of the same unit type. Only works with types: `TIME_CREDIT`, `CREDIT`"
      totalDiscountPercent: 
        type: integer
        description: "The total discountPercent from all rewards. Only works with types: `PCT_DISCOUNT`"
      referredDiscountPercent: 
        type: integer
        description: "The total discountPercent from rewards with `rewardSource = REFERRED` Only works with types: `PCT_DISCOUNT`"
      referrerDiscountPercent: 
        type: integer
        description: "The total discountPercent from rewards with `rewardSource = FRIEND_SIGNUP` Only works with types: `PCT_DISCOUNT`"

  Referral:
    description: A link between the user/account of the referrer and the new referred user/account. The authoritative source of who has referred whom. Not all referrals result in a Reward or a RewardBalance being created, such as in-progress referrals.
    properties:
      id:
        type: string
        example: abdsds5124abewet
        description: Unique identifier for the Referral object
      referredUser:
        $ref: "#/definitions/User"
      referrerUser:
        $ref: "#/definitions/User"
      referredReward:
        $ref: "#/definitions/Reward"
      referrerReward:
        $ref: "#/definitions/Reward"
      moderationStatus:
        type: string
        example: PENDING
        description: |
          "One of `PENDING` or `ACTIONED`. When referrals are manually managed, each referral has a `PENDING` state until it is explicitly moderated."
        enum:
          - PENDING
          - ACTIONED
      referredModerationStatus:
        type: string
        example: PENDING
        description: |
          "One of `PENDING`, `APPROVED` or `DENIED`. Used to identify the *referred* user's moderation status and affect Reward cancellation."
        enum:
          - PENDING
          - APPROVED
          - DENIED
      referrerModerationStatus:
        type: string
        example: PENDING
        description: |
          "One of `PENDING`, `APPROVED` or `DENIED`. Used to identify the *referrer* user's moderation status and affect Reward cancellation."
        enum:
          - PENDING
          - APPROVED
          - DENIED
      dateReferralStarted:
        type: integer
        description: "Timestamp of when this referral was started."
      dateReferralPaid:
        type: integer
        description: "Timestamp of when this referral was marked as `PAID`."
      dateReferralEnded:
        type: integer
        description: "Timestamp of when this referral was ended."
      dateModerated:
        type: integer
        description: "Timestamp of when this referral was last moderated."
  
  Sharelink:
    description: Share link for an individual user.
    properties: 
      shareLink:
        type: string
        description: The unique share link the user can refer their friends with. The Share Link contains the Referral Code for making referrals and a source for Analytics purposes. 
      facebookShareLink:
        type: string
        description: "The Share Link for Facebook."
      twitterShareLink:
        type: string
        description: "The Share Link for Twitter."
      emailShareLink:
        type: string
        description: "The Share Link for Email."
      mobileShareLink:
        type: string
        description: "The Share Link for mobile devices."
      mobileFacebookShareLink:
        type: string
        description: "The Share Link for Facebook on mobile devices."
      mobileTwitterSharelink:
        type: string
        description: "The Share Link for Twitter on mobile devices."
      mobileEmailShareLink:
        type: string
        description: "The Share Link for Email on mobile devices."
    example:
      shareLink: "http://ssqt.co/pZVp"
      facebookShareLink: "http://ssqt.co/pZVq"
      twitterShareLink: "http://ssqt.co/pZVr"
      emailShareLink: "http://ssqt.co/pZVs"
      mobileShareLink: "http://ssqt.co/pZVt"
      mobileFacebookShareLink: "http://ssqt.co/pZVu"
      mobileTwitterShareLink: "http://ssqt.co/pZVv"
      mobileEmailShareLink: "http://ssqt.co/pZVw"

  WebhookEndpoint:
    description: An endpoint to receive events
    properties:
      endpointUrl:
        type: string
        example: "http://app.example.com/endpoint/sqtch"
        description: The url of the endpoint that receives events
      name:
        type: string
        example: "Zapier"
        description: Optional name of the endpoint that receives events  

  VariablesSchema:
    description: The JSON Schema that defines the format of the theme variables. See [theme variables](/themes/variables) for more info.
    allOf:
      # - $ref: "http://json-schema.org/draft-04/schema"
      - type: object
        properties:
          name:
            type: string
    example:
      title: Example Theme Variables Schema
      type: object
      properties:
        headline:
          type: string
          default:  "Invite a friend, get $10"
        buttonColor:
          type: string
          format: color
  VariablesInstance:
    description: The stored values for the variables.  See [theme variables](/themes/variables) for more info.
    type: object
    additionalProperties: true
    example:
      headline: "Invite a friend, get $10"
      buttonColor: "#FF0000"

  ThemeContext:
    description: The context object provided to themes for rendering the current user's widget.
    properties:
      tenantAlias:
        type: string
        example: abdsds5124abewet
        description: The active tenant's alias
      companyName:
        type: string
        example: Acme Corp
        description: The name of the company for the referral program
      programDetails:
        type: object
        description: The details of the incentives used for the referral program.
        properties:
          referredRewardDetails:
            $ref: "#/definitions/RewardTemplate"
          referrerRewardDetails:
            $ref: "#/definitions/RewardTemplate"
      user:
        $ref: "#/definitions/User"
      referrals:
        type: array
        description: The referrals made by the active user
        items: 
          $ref: "#/definitions/Referral"
      referralsLength:
        type: integer
        description: The total number of referrals made by this user
      rewardBalances:
        type: array
        description: An array of reward balances for this user
        items: 
          $ref: "#/definitions/RewardBalance"
      shareLinks:
        $ref: "#/definitions/Sharelink"
      referredBy:
        type: object
        description: Details of who referred the current user
        properties:
          referredByUser:
            $ref: "#/definitions/User"
          dateReferred:
            type: integer
            description: The date when the referral happened
            example: 1404121071158
      variables:
        $ref: "#/definitions/VariablesInstance"
      variablesSchema:
        $ref: "#/definitions/VariablesSchema"
      mode:
        type: string
        description: The mode the widget has been loaded in
        enum:
          - POPUP
          - EMBED
          - NOCONTENT
      assetVersion:
        type: string
        description: A unique hash used to version assets.
      headerVersion:
        type: string
        description: A unique version number used internally.
      headerVersion:
        type: string
        description: A unique version number used internally.


  #
  # ========== Response / Envelope Types ==============
  #
  # Only REST response envelopers included in this section.
  #
  
  ListEnvelope:
    properties:
      count:
        type: integer
        description: The number of results returned in this response
      totalCount:
        type: integer
        description: The total number of results available in this tenant


  UserList:
    allOf:
      - $ref: '#/definitions/ListEnvelope'
      - type: object
        properties:
          users:
            type: array
            description: A list of User objects
            items: 
              $ref: "#/definitions/User"  
  ReferralList:
    allOf:
      - $ref: '#/definitions/ListEnvelope'
      - type: object
        properties:
          referrals:
            type: array
            description: A list of Referral objects
            items: 
              $ref: "#/definitions/Referral"
  RewardDebitResponse:
    description: Details about a successful Reward Balance Debit transaction.
    properties: 
      creditRedeemed:
        type: integer
        example: 200
        description: The amount of credit that was just debitted.
      creditAvailable:
        type: integer
        example: 1800
        description: The remaining credit in this account of the same unit type.
      unit:
        type: string
        example: cents
        description: The type of credit that was just debitted.

 #
  # ========== Request Types ==============
  #
  # Only REST request objects included in this section.
  #
  AccountDiscountRequest:
    required:
      - accountId
      - paymentProviderId
      - couponCode
    properties:
      accountId: 
        type: string
        example: abc123
        description: |
          Unique identifier for the account. We use this ID to link a group of users together. See [Shared vs Solo Accounts](/shared-vs-solo-accounts/) to see what you should use here.
      paymentProviderId:
        type: string
        example: cus_123
        description: |
          The payment provider ID of the newly created account from Braintree or Zuora. This will be the Braintree Account ID or the Zuora Account ID of the newly created account.
      couponCode:
        type: string
        example: BOBTESTERSON
        description: |
          The coupon/referral code of the user that referred this user. Can be obtained from the referral-tracking cookie using squatch.js coupon autofill.
  RewardDebitRequest:
    description: A request to debit a single reward
    required:
      - amount
      - unit
    properties: 
      amount:
        type: integer
        example: 200
        description: The amount of credit to be debitted.
      unit:
        type: string
        example: cents
        description: |
          The type of credit to be debitted. E.g. "free-months" or "cents"
  RewardBalanceDebitRequest:
    description: A request to debit a Reward Balance
    required:
      - accountId
      - unit
      - amount
    properties: 
      accountId:
        type: string
        description: The ID of the account to be debitted.
        example: abc123
      unit:
        type: string
        example: cents
        description: |
          The type of credit to be debitted. E.g. "free-months" or "cents"
      amount:
        type: integer
        example: 200
        description: The amount of credit to be debitted.
  ReferralModerationBulkRequest:
    description: A request to perform one or several moderation actions
    required:
      - actions
    properties:
      actions:
        type: array
        description: "A list of individual moderation actions for specific referrals. Limited to a maximum of 100 actions per request"
        minItems: 1
        maxItems: 100
        items: 
          $ref: "#/definitions/ReferralModerationRequest"
  ReferralModerationRequest:
    description: A request to moderate a single referral
    required:
      - referralId
      - action
    properties:
      referralId:
        type: string
        example: "546270a6e4b0c1871186a920"
        description: "The `id` of the Referral to be moderated"
      action:
        type: string
        example: REFERRED_DENIED
        description: "The type of moderation action. One of `APPROVED`, `DENIED`, `REFERRER_DENIED`, `REFERRED_DENIED`, `REFERRER_APPROVED`, `REFERRED_APPROVED`"
        enum:
          - APPROVED
          - DENIED
          - REFERRER_APPROVED
          - REFERRED_APPROVED
          - REFERRER_DENIED
          - REFERRED_DENIED

  # Response Types
  Error: 
    properties: 
      statusCode: 
        description: The HTTP status code of the error
        type: integer
        format: int32
        example: 404
      message: 
        description: The human-readable description of what went wrong. Use this to help you debug.
        type: string
      apiErrorCode: 
        description: A machine error code
        type: string
        
  VariablesError: 
    allOf:
      - $ref: '#/definitions/Error'
      - type: object
        properties: 
          validationErrors: 
            description: A list of validation errors
            type: array
            items: 
              type: string
    

responses:
  GeneralError:
    description: Unexpected Error
    schema:
      $ref: '#/definitions/Error'
  VariablesErrorResponse:
    description: Variables Update Error
    schema:
      $ref: '#/definitions/VariablesError'
    examples:
      "application/json": 
        message: "Your request failed to validate against the current variables schema."
        statusCode: 400
        apiErrorCode: "VALIDATION_FAILED"
        validationErrors: 
          - "object has missing required properties ([\"emailShareSubject\",\"facebookShareBody\",\"facebookShareSubject\",\"twitterShareBody\"])"